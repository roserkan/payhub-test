// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Payhub.Infrastructure.Persistence.Contexts;

#nullable disable

namespace Payhub.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250105213408_accounts_add_isdeleted")]
    partial class accounts_add_isdeleted
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Payhub.Domain.Entities.AccountManagement.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountClassification")
                        .HasColumnType("integer")
                        .HasColumnName("account_classification");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_number");

                    b.Property<int>("AccountType")
                        .HasColumnType("integer")
                        .HasColumnName("account_type");

                    b.Property<int?>("AffiliateId")
                        .HasColumnType("integer")
                        .HasColumnName("affiliate_id");

                    b.Property<int>("BankId")
                        .HasColumnType("integer")
                        .HasColumnName("bank_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<decimal>("DailyDepositAmountLimit")
                        .HasColumnType("numeric")
                        .HasColumnName("daily_deposit_amount_limit");

                    b.Property<decimal>("DailyWithdrawAmountLimit")
                        .HasColumnType("numeric")
                        .HasColumnName("daily_withdraw_amount_limit");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("EmailImapPassword")
                        .HasColumnType("text")
                        .HasColumnName("email_imap_password");

                    b.Property<string>("EmailPassword")
                        .HasColumnType("text")
                        .HasColumnName("email_password");

                    b.Property<decimal>("FirstBalance")
                        .HasColumnType("numeric")
                        .HasColumnName("first_balance");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<decimal>("MaxDepositAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("max_deposit_amount");

                    b.Property<decimal>("MinDepositAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("min_deposit_amount");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<int>("PaymentWayId")
                        .HasColumnType("integer")
                        .HasColumnName("payment_way_id");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("AccountNumber")
                        .IsUnique();

                    b.HasIndex("AffiliateId");

                    b.HasIndex("BankId");

                    b.HasIndex("PaymentWayId");

                    b.ToTable("accounts", (string)null);
                });

            modelBuilder.Entity("Payhub.Domain.Entities.AccountManagement.AccountSite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("SiteId")
                        .HasColumnType("integer")
                        .HasColumnName("site_id");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("SiteId");

                    b.ToTable("account_sites", (string)null);
                });

            modelBuilder.Entity("Payhub.Domain.Entities.AccountManagement.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("icon_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("banks", (string)null);
                });

            modelBuilder.Entity("Payhub.Domain.Entities.AccountManagement.BlacklistIban", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Iban")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("iban");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("Iban")
                        .IsUnique();

                    b.ToTable("blacklist_ibans", (string)null);
                });

            modelBuilder.Entity("Payhub.Domain.Entities.AffiliateManagement.Affiliate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDynamic")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("affiliates", (string)null);
                });

            modelBuilder.Entity("Payhub.Domain.Entities.BotManagement.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("serial_number");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("SerialNumber")
                        .IsUnique();

                    b.ToTable("devices", (string)null);
                });

            modelBuilder.Entity("Payhub.Domain.Entities.BotManagement.HavaleBotMove", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("ReceiverAccId")
                        .HasColumnType("integer")
                        .HasColumnName("receiver_acc_id");

                    b.Property<string>("SecurityKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("security_key");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sender_name");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("TransferReceivedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("transfer_received_date");

                    b.Property<int>("TryCount")
                        .HasColumnType("integer")
                        .HasColumnName("try_count");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.ToTable("havale_bot_moves", (string)null);
                });

            modelBuilder.Entity("Payhub.Domain.Entities.BotManagement.WithdrawOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ReceiverAccountNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("receiver_account_number");

                    b.Property<string>("ReceiverFullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("receiver_full_name");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("transaction_date");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("withdraw_orders", (string)null);
                });

            modelBuilder.Entity("Payhub.Domain.Entities.CustomerManagement.Blacklist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BlacklistType")
                        .HasColumnType("integer")
                        .HasColumnName("blacklist_type");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("blacklists", (string)null);
                });

            modelBuilder.Entity("Payhub.Domain.Entities.CustomerManagement.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("CustomerIpAddress")
                        .HasColumnType("text")
                        .HasColumnName("customer_ip_address");

                    b.Property<string>("FullName")
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<string>("IdentityNumber")
                        .HasColumnType("text")
                        .HasColumnName("identity_number");

                    b.Property<string>("PanelCustomerId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("panel_customer_id");

                    b.Property<string>("SignupDate")
                        .HasColumnType("text")
                        .HasColumnName("signup_date");

                    b.Property<string>("SiteCustomerId")
                        .HasColumnType("text")
                        .HasColumnName("site_customer_id");

                    b.Property<int>("SiteId")
                        .HasColumnType("integer")
                        .HasColumnName("site_id");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("PanelCustomerId")
                        .IsUnique();

                    b.HasIndex("SiteId");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("Payhub.Domain.Entities.PaymentWayManagement.PaymentWay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("payment_ways", (string)null);
                });

            modelBuilder.Entity("Payhub.Domain.Entities.SafeManagement.SiteSafeMove", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<decimal>("CommissionAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("commission_amount");

                    b.Property<decimal>("CommissionRate")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("commission_rate");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<int>("MoveType")
                        .HasColumnType("integer")
                        .HasColumnName("move_type");

                    b.Property<int>("SiteId")
                        .HasColumnType("integer")
                        .HasColumnName("site_id");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("transaction_date");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer")
                        .HasColumnName("transaction_type");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("SiteId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("site_safe_moves", (string)null);
                });

            modelBuilder.Entity("Payhub.Domain.Entities.SiteManagement.Infrastructure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("DepositAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("deposit_address");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<string>("WithdrawAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("withdraw_address");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("infrastructures", (string)null);
                });

            modelBuilder.Entity("Payhub.Domain.Entities.SiteManagement.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("InfrastructureId")
                        .HasColumnType("integer")
                        .HasColumnName("infrastructure_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("InfrastructureId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("sites", (string)null);
                });

            modelBuilder.Entity("Payhub.Domain.Entities.SiteManagement.SitePaymentWay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("api_key");

                    b.Property<decimal>("Commission")
                        .HasColumnType("numeric")
                        .HasColumnName("commission");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<decimal>("MaxBalanceLimit")
                        .HasColumnType("numeric")
                        .HasColumnName("max_balance_limit");

                    b.Property<decimal>("MinBalanceLimit")
                        .HasColumnType("numeric")
                        .HasColumnName("min_balance_limit");

                    b.Property<int>("PaymentWayId")
                        .HasColumnType("integer")
                        .HasColumnName("payment_way_id");

                    b.Property<string>("SecretKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("secret_key");

                    b.Property<int>("SiteId")
                        .HasColumnType("integer")
                        .HasColumnName("site_id");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("PaymentWayId");

                    b.HasIndex("SecretKey")
                        .IsUnique();

                    b.HasIndex("SiteId");

                    b.ToTable("site_payment_ways", (string)null);
                });

            modelBuilder.Entity("Payhub.Domain.Entities.TransactionManagement.Deposit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<int?>("AffiliateId")
                        .HasColumnType("integer")
                        .HasColumnName("affiliate_id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<string>("AutoUpdatedName")
                        .HasColumnType("text")
                        .HasColumnName("auto_updated_name");

                    b.Property<decimal>("Commission")
                        .HasColumnType("numeric")
                        .HasColumnName("commission");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("created_user_id");

                    b.Property<string>("CustomerFullName")
                        .HasColumnType("text")
                        .HasColumnName("customer_full_name");

                    b.Property<string>("DynamicAccountName")
                        .HasColumnType("text")
                        .HasColumnName("dynamic_account_name");

                    b.Property<string>("DynamicAccountNumber")
                        .HasColumnType("text")
                        .HasColumnName("dynamic_account_number");

                    b.Property<int?>("InfraCallbackType")
                        .HasColumnType("integer")
                        .HasColumnName("infra_callback_type");

                    b.Property<bool>("InfraConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("infra_confirmed");

                    b.Property<string>("PanelCustomerId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("panel_customer_id");

                    b.Property<decimal>("PayedAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("payed_amount");

                    b.Property<string>("PaymentId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payment_id");

                    b.Property<int>("PaymentWayId")
                        .HasColumnType("integer")
                        .HasColumnName("payment_way_id");

                    b.Property<string>("ProcessId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("process_id");

                    b.Property<string>("RedirectUrl")
                        .HasColumnType("text")
                        .HasColumnName("redirect_url");

                    b.Property<string>("SiteCustomerId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("site_customer_id");

                    b.Property<int>("SiteId")
                        .HasColumnType("integer")
                        .HasColumnName("site_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("transaction_date");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("updated_user_id");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("PaymentWayId");

                    b.HasIndex("ProcessId")
                        .IsUnique();

                    b.HasIndex("SiteId");

                    b.HasIndex("UpdatedUserId");

                    b.HasIndex("Status", "CreatedDate");

                    b.ToTable("deposits", (string)null);
                });

            modelBuilder.Entity("Payhub.Domain.Entities.TransactionManagement.Withdraw", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<int?>("AffiliateId")
                        .HasColumnType("integer")
                        .HasColumnName("affiliate_id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<string>("AutoUpdatedName")
                        .HasColumnType("text")
                        .HasColumnName("auto_updated_name");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("created_user_id");

                    b.Property<string>("CustomerAccountNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("customer_account_number");

                    b.Property<string>("CustomerFullName")
                        .HasColumnType("text")
                        .HasColumnName("customer_full_name");

                    b.Property<int?>("InfraCallbackType")
                        .HasColumnType("integer")
                        .HasColumnName("infra_callback_type");

                    b.Property<bool>("InfraConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("infra_confirmed");

                    b.Property<bool>("IsIbanBlacklisted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_iban_blacklisted");

                    b.Property<string>("PanelCustomerId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("panel_customer_id");

                    b.Property<decimal>("PayedAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("payed_amount");

                    b.Property<int>("PaymentWayId")
                        .HasColumnType("integer")
                        .HasColumnName("payment_way_id");

                    b.Property<string>("ProcessId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("process_id");

                    b.Property<string>("SiteCustomerId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("site_customer_id");

                    b.Property<int>("SiteId")
                        .HasColumnType("integer")
                        .HasColumnName("site_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("transaction_date");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("updated_user_id");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("PaymentWayId");

                    b.HasIndex("ProcessId")
                        .IsUnique();

                    b.HasIndex("SiteId");

                    b.HasIndex("UpdatedUserId");

                    b.HasIndex("Status", "CreatedDate");

                    b.ToTable("withdraws", (string)null);
                });

            modelBuilder.Entity("Payhub.Domain.Entities.UserManagement.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("RoleType")
                        .HasColumnType("integer")
                        .HasColumnName("role_type");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Payhub.Domain.Entities.UserManagement.RoleAffiliatePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AffiliateId")
                        .HasColumnType("integer")
                        .HasColumnName("affiliate_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("AffiliateId");

                    b.HasIndex("RoleId");

                    b.ToTable("role_affiliate_permissions", (string)null);
                });

            modelBuilder.Entity("Payhub.Domain.Entities.UserManagement.RoleSitePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int>("SiteId")
                        .HasColumnType("integer")
                        .HasColumnName("site_id");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("SiteId");

                    b.ToTable("role_site_permissions", (string)null);
                });

            modelBuilder.Entity("Payhub.Domain.Entities.UserManagement.RoleSystemPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int>("SystemPermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("system_permission_id");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("SystemPermissionId");

                    b.ToTable("role_system_permissions", (string)null);
                });

            modelBuilder.Entity("Payhub.Domain.Entities.UserManagement.SystemPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PermissionGroup")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("permission_group");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("system_permissions", (string)null);
                });

            modelBuilder.Entity("Payhub.Domain.Entities.UserManagement.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("FirstPassword")
                        .HasColumnType("text")
                        .HasColumnName("first_password");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsTwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_two_factor_enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("password_hash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("password_salt");

                    b.Property<string>("TwoFactorSecret")
                        .HasColumnType("text")
                        .HasColumnName("two_factor_secret");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Payhub.Domain.Entities.UserManagement.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("Payhub.Domain.Entities.AccountManagement.Account", b =>
                {
                    b.HasOne("Payhub.Domain.Entities.AffiliateManagement.Affiliate", "Affiliate")
                        .WithMany("Accounts")
                        .HasForeignKey("AffiliateId");

                    b.HasOne("Payhub.Domain.Entities.AccountManagement.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Payhub.Domain.Entities.PaymentWayManagement.PaymentWay", "PaymentWay")
                        .WithMany()
                        .HasForeignKey("PaymentWayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Affiliate");

                    b.Navigation("Bank");

                    b.Navigation("PaymentWay");
                });

            modelBuilder.Entity("Payhub.Domain.Entities.AccountManagement.AccountSite", b =>
                {
                    b.HasOne("Payhub.Domain.Entities.AccountManagement.Account", "Account")
                        .WithMany("AccountSites")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Payhub.Domain.Entities.SiteManagement.Site", "Site")
                        .WithMany("AccountSites")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Payhub.Domain.Entities.BotManagement.Device", b =>
                {
                    b.HasOne("Payhub.Domain.Entities.AccountManagement.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Payhub.Domain.Entities.BotManagement.WithdrawOrder", b =>
                {
                    b.HasOne("Payhub.Domain.Entities.AccountManagement.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Payhub.Domain.Entities.CustomerManagement.Customer", b =>
                {
                    b.HasOne("Payhub.Domain.Entities.SiteManagement.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Payhub.Domain.Entities.SafeManagement.SiteSafeMove", b =>
                {
                    b.HasOne("Payhub.Domain.Entities.UserManagement.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Payhub.Domain.Entities.SiteManagement.Site", "Site")
                        .WithMany("SiteSafeMoves")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Payhub.Domain.Entities.UserManagement.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");

                    b.Navigation("CreatedUser");

                    b.Navigation("Site");

                    b.Navigation("UpdatedUser");
                });

            modelBuilder.Entity("Payhub.Domain.Entities.SiteManagement.Site", b =>
                {
                    b.HasOne("Payhub.Domain.Entities.SiteManagement.Infrastructure", "Infrastructure")
                        .WithMany()
                        .HasForeignKey("InfrastructureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Infrastructure");
                });

            modelBuilder.Entity("Payhub.Domain.Entities.SiteManagement.SitePaymentWay", b =>
                {
                    b.HasOne("Payhub.Domain.Entities.SiteManagement.Site", null)
                        .WithMany("SitePaymentWays")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Payhub.Domain.Entities.TransactionManagement.Deposit", b =>
                {
                    b.HasOne("Payhub.Domain.Entities.AccountManagement.Account", "Account")
                        .WithMany("Deposits")
                        .HasForeignKey("AccountId");

                    b.HasOne("Payhub.Domain.Entities.UserManagement.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Payhub.Domain.Entities.PaymentWayManagement.PaymentWay", "PaymentWay")
                        .WithMany()
                        .HasForeignKey("PaymentWayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Payhub.Domain.Entities.SiteManagement.Site", "Site")
                        .WithMany("Deposits")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Payhub.Domain.Entities.UserManagement.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");

                    b.Navigation("Account");

                    b.Navigation("CreatedUser");

                    b.Navigation("PaymentWay");

                    b.Navigation("Site");

                    b.Navigation("UpdatedUser");
                });

            modelBuilder.Entity("Payhub.Domain.Entities.TransactionManagement.Withdraw", b =>
                {
                    b.HasOne("Payhub.Domain.Entities.AccountManagement.Account", "Account")
                        .WithMany("Withdraws")
                        .HasForeignKey("AccountId");

                    b.HasOne("Payhub.Domain.Entities.UserManagement.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Payhub.Domain.Entities.PaymentWayManagement.PaymentWay", "PaymentWay")
                        .WithMany()
                        .HasForeignKey("PaymentWayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Payhub.Domain.Entities.SiteManagement.Site", "Site")
                        .WithMany("Withdraws")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Payhub.Domain.Entities.UserManagement.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");

                    b.Navigation("Account");

                    b.Navigation("CreatedUser");

                    b.Navigation("PaymentWay");

                    b.Navigation("Site");

                    b.Navigation("UpdatedUser");
                });

            modelBuilder.Entity("Payhub.Domain.Entities.UserManagement.RoleAffiliatePermission", b =>
                {
                    b.HasOne("Payhub.Domain.Entities.AffiliateManagement.Affiliate", "Affiliate")
                        .WithMany()
                        .HasForeignKey("AffiliateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Payhub.Domain.Entities.UserManagement.Role", "Role")
                        .WithMany("RoleAffiliatePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Affiliate");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Payhub.Domain.Entities.UserManagement.RoleSitePermission", b =>
                {
                    b.HasOne("Payhub.Domain.Entities.UserManagement.Role", "Role")
                        .WithMany("RoleSitePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Payhub.Domain.Entities.SiteManagement.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Payhub.Domain.Entities.UserManagement.RoleSystemPermission", b =>
                {
                    b.HasOne("Payhub.Domain.Entities.UserManagement.Role", "Role")
                        .WithMany("RoleSystemPermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Payhub.Domain.Entities.UserManagement.SystemPermission", "SystemPermission")
                        .WithMany()
                        .HasForeignKey("SystemPermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("SystemPermission");
                });

            modelBuilder.Entity("Payhub.Domain.Entities.UserManagement.UserRole", b =>
                {
                    b.HasOne("Payhub.Domain.Entities.UserManagement.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Payhub.Domain.Entities.UserManagement.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Payhub.Domain.Entities.AccountManagement.Account", b =>
                {
                    b.Navigation("AccountSites");

                    b.Navigation("Deposits");

                    b.Navigation("Withdraws");
                });

            modelBuilder.Entity("Payhub.Domain.Entities.AffiliateManagement.Affiliate", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Payhub.Domain.Entities.SiteManagement.Site", b =>
                {
                    b.Navigation("AccountSites");

                    b.Navigation("Deposits");

                    b.Navigation("SitePaymentWays");

                    b.Navigation("SiteSafeMoves");

                    b.Navigation("Withdraws");
                });

            modelBuilder.Entity("Payhub.Domain.Entities.UserManagement.Role", b =>
                {
                    b.Navigation("RoleAffiliatePermissions");

                    b.Navigation("RoleSitePermissions");

                    b.Navigation("RoleSystemPermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Payhub.Domain.Entities.UserManagement.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
